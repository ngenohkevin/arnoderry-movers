name: Build and Deploy to Dokploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20.9.0'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test build locally
        run: |
          echo "Testing build locally to catch errors early"
          npm run build
        env:
          NODE_ENV: production

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{sha}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}

      - name: Set up Docker Buildx
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_TELEGRAM_BOT_TOKEN=${{ secrets.VITE_TELEGRAM_BOT_TOKEN }}
            VITE_TELEGRAM_CHAT_IDS=${{ secrets.VITE_TELEGRAM_CHAT_IDS }}
            VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}
            VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
            VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
            VITE_EMAILJS_PRIVATE_KEY=${{ secrets.VITE_EMAILJS_PRIVATE_KEY }}
            VITE_NOTIFICATION_EMAIL=${{ secrets.VITE_NOTIFICATION_EMAIL }}
            VITE_BUSINESS_PHONE_NUMBER=${{ secrets.VITE_BUSINESS_PHONE_NUMBER }}

      - name: Deploy to Dokploy via Webhook
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          echo "Triggering Dokploy deployment..."

          # Trigger deployment via webhook
          curl -X POST "${{ secrets.DOKPLOY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            || echo "Webhook trigger sent"

          echo "âœ… Deployment webhook triggered!"
          echo "ðŸ“¦ Image: ghcr.io/${{ github.repository }}:latest"
          echo "ðŸš€ Dokploy will now pull and deploy the pre-built image"